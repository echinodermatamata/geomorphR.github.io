n <- 1000
sigma <- matrix(0,250,250); diag(sigma) <- 1 #identity matrix
#sigma <- nearPD(sigma, corr = FALSE, keepDiag = TRUE)
mydat <- mvrnorm(n = n, mu = mu, Sigma = sigma, empirical = FALSE)
mu <- rep(6,250)
n <- 1000
sigma <- matrix(0,250,250); diag(sigma) <- 1 #identity matrix
#sigma <- nearPD(sigma, corr = FALSE, keepDiag = TRUE)
mydat <- mvrnorm(n = n, mu = mu, Sigma = sigma, empirical = FALSE)
View(mydat2)
View(mydat)
p[1]
p[25]
p
p <- seq(5, 250, 15)
p
p <- seq(5, 250, 5)
p
zscores <- unlist(lapply(1:nsets, function(j) {
iter.b <- RRPP:::boot.index(p[j], iter = iter, seed = "random")
#^bootstrapped column numbers for p numbers of traits
res <- lapply(1:(iter+1), function(k) {
eig <- eigen(cov(dat[[j]][,iter.b[[k]]]))
rel <- rel.eig(eig$values)
})
#^Generates a list of ICV values (res) calculated from one of the random datasets
eff.size <- geomorph:::effect.size(unlist(res))
#^Calculates the effect size for the given dist of ICV values
}))
zscores <- unlist(lapply(1:nsets, function(j) {
iter.b <- RRPP:::boot.index(p[j], iter = iter, seed = "random")
#^bootstrapped column numbers for p numbers of traits
res <- lapply(1:(iter+1), function(k) {
eig <- eigen(cov(dat[[k]][,iter.b[[j]]]))
rel <- rel.eig(eig$values)
})
#^Generates a list of ICV values (res) calculated from one of the random datasets
eff.size <- geomorph:::effect.size(unlist(res))
#^Calculates the effect size for the given dist of ICV values
}))
dat <- lapply(1:nsets, function(j) {
matrix(rnorm(n*p[i]),ncol=p[i])
})
View(dat)
library(tinytex)
tlmgr_install(pkgs = c("setspace"))
tinytex::reinstall_tinytex()
library(MASS)
p <- 10
Sigma <- diag(1,p,p)
x <- cov(mvrnorm(10), Sigma)
x <- cov(mvrnorm(10), 0, Sigma)
x <- cov(mvrnorm(10, 0, Sigma))
mvrnorm(10,0,Sigma=Sigma)
mvrnorm(20,0,Sigma=Sigma)
mu <- c(rep(0,10))
mvrnorm(20,,Sigma=Sigma)
mvrnorm(20,mu,Sigma=Sigma)
x <- cov(mvrnorm(10, mu, Sigma))
CalcEs <- function(x){
CalcEs <- function(x){
eig <- eigen(x)$values
sum(unlist(lapply(1:p, function(i){
(eig[i])/(sum(eig))*(log((eig[i])/(sum(eig)))
}))))
}
CalcEs <- function(x){
eig <- eigen(x)$values
sum(unlist(lapply(1:p, function(i){
(eig[i])/(sum(eig))*(log((eig[i])/(sum(eig))))
})))
}
CalcEs(x)
CalcEs <- function(x){
eig <- eigen(x)$values
sum(unlist(lapply(1:p, function(i){
(eig[i])/(sum(eig))*(log((eig[i])))/(sum(eig))
})))
}
CalcEs(x)
CalcEs <- function(x){
eig <- eigen(x)$values
sum(unlist(lapply(1:p, function(i){
(eig[i])/(sum(eig))*log((eig[i])/(sum(eig)))
})))
}
CalcEs(x)
CalcEs <- function(x){
eig <- eigen(x)$values
sum(unlist(lapply(1:p, function(i){
((eig[i])/(sum(eig)))*(log((eig[i])/(sum(eig))))
})))
}
CalcEs(x)
CalcEs <- function(x){
eig <- eigen(x)$values
p <- length(eig)
sum(unlist(lapply(1:p, function(i){
((eig[i])/(sum(eig)))*(log((eig[i])/(sum(eig))))
})))
}
CalcEs(x)
mu <- c(rep(5,10))
x <- cov(mvrnorm(10, mu, Sigma))
CalcEs(x)
CalcEnt <- function(x){
eig <- eigen(x)$values
p <- length(eig)
sum(unlist(lapply(1:p, function(i){
((eig[i])/(sum(eig)))*(log((eig[i])/(sum(eig))))
})))
}
rm(CalcEs())
rm(CalcEs
)
Entropy <- function(x){
eig <- eigen(x)$values
p <- length(eig)
sum(unlist(lapply(1:p, function(i){
((eig[i])/(sum(eig)))*(log((eig[i])/(sum(eig))))
})))
}
rm(CalcEnt)
Re <- exp(1)^(-1*Entropy(x))
Rel.Disp <- function(x){
eig <- eigen(x)$values
p <- length(eig)
Entropy <-sum(unlist(lapply(1:p, function(i){
((eig[i])/(sum(eig)))*(log((eig[i])/(sum(eig))))
})))
Re <- exp(1)^(-1*Entropy(x))
Reint <- as.integer(Re)
eig2 <- eig[1:Reint]
FractRankVar<-Eig[Reint+1]*(Re-Reint)
ProductEffRankEigen<-prod(eig2)*FractRankVar
SGVre <- prod(eig)^(1/Re)
EffDis <- sqrt(EffectiveRankSGV)
Rel.Disp <- (EffDis)/(sqrt((1)/(pi*Re)))
}
Rel.Disp(x)
Sigma <- diag(1,p,p)
mu <- c(rep(5,10))
x <- cov(mvrnorm(10, mu, Sigma))
library(MASS)
Sigma <- diag(1,p,p)
mu <- c(rep(5,10))
x <- cov(mvrnorm(10, mu, Sigma))
Rel.Disp(x)
x <- cov(mvrnorm(10, mu, Sigma))
mu <- c(rep(5,p))
x <- cov(mvrnorm(10, mu, Sigma))
Rel.Disp(x)
Rel.Disp <- function(x){
eig <- eigen(x)$values
p <- length(eig)
Entropy <-sum(unlist(lapply(1:p, function(i){
((eig[i])/(sum(eig)))*(log((eig[i])/(sum(eig))))
})))
Re <- exp(1)^(-1*Entropy)
Reint <- as.integer(Re)
eig2 <- eig[1:Reint]
FractRankVar<-Eig[Reint+1]*(Re-Reint)
ProductEffRankEigen<-prod(eig2)*FractRankVar
SGVre <- prod(eig)^(1/Re)
EffDis <- sqrt(EffectiveRankSGV)
Rel.Disp <- (EffDis)/(sqrt((1)/(pi*Re)))
}
Rel.Disp(x)
eig <- eigen(x)$values
p <- length(eig)
Entropy <-sum(unlist(lapply(1:p, function(i){
((eig[i])/(sum(eig)))*(log((eig[i])/(sum(eig))))
})))
Rel.Disp <- function(x){
eig <- eigen(x)$values
p <- length(eig)
eigscale <- (eig)/(sum(eig))
Entropy <-sum(eigscale*(log(eigscale)))
Re <- exp(-1*Entropy)
Reint <- as.integer(Re)
eig2 <- eig[1:Reint]
FractRankVar<-Eig[Reint+1]*(Re-Reint)
ProductEffRankEigen<-prod(eig2)*FractRankVar
SGVre <- prod(eig)^(1/Re)
EffDis <- sqrt(EffectiveRankSGV)
Rel.Disp <- (EffDis)/(sqrt((1)/(pi*Re)))
}
Rel.Disp(x)
eig <- eigen(x)$values
p <- length(eig)
eigscale <- (eig)/(sum(eig))
Entropy <-sum(eigscale*(log(eigscale)))
Entropy <-sum((eigscale)*(log(eigscale)))
mu <- c(rep(0,p))
x <- cov(mvrnorm(10, mu, Sigma))
Rel.Disp(x)
Sigma <- diag(1,10,10)
mu <- c(rep(0,10))
x <- cov(mvrnorm(10, mu, Sigma))
Rel.Disp(x)
eig <- eigen(x)$values
p <- length(eig)
eigscale <- (eig)/(sum(eig))
eigscale
Sigma <-  matrix(0.5, 10,10); diag(Sigma) <- 1
mu <- c(rep(0,10))
x <- cov(mvrnorm(10, mu, Sigma))
Rel.Disp(x)
Rel.Disp <- function(x){
eig <- eigen(x)$values
p <- length(eig)
eigscale <- (eig)/(sum(eig))
Entropy <-sum((eigscale)*(log(eigscale)))
Re <- exp(-1*Entropy)
Reint <- as.integer(Re)
eig2 <- eig[1:Reint]
FractRankVar<-eig[Reint+1]*(Re-Reint)
ProductEffRankEigen<-prod(eig2)*FractRankVar
SGVre <- prod(eig)^(1/Re)
EffDis <- sqrt(EffectiveRankSGV)
Rel.Disp <- (EffDis)/(sqrt((1)/(pi*Re)))
}
Rel.Disp(x)
Rel.Disp <- function(x){
eig <- eigen(x)$values
p <- length(eig)
eigscale <- (eig)/(sum(eig))
Entropy <-sum((eigscale)*(log(eigscale)))
Re <- exp(-1*Entropy)
Reint <- as.integer(Re)
eig2 <- eig[1:Reint]
FractRankVar<-eig[Reint+1]*(Re-Reint)
ProductEffRankEigen<-prod(eig2)*FractRankVar
SGVre <- prod(eig)^(1/Re)
EffDis <- sqrt(SVGre)
Rel.Disp <- (EffDis)/(sqrt((1)/(pi*Re)))
}
Rel.Disp(x)
eig <- eigen(x)$values
p <- length(eig)
eigscale <- (eig)/(sum(eig))
Entropy <-sum((eigscale)*(log(eigscale)))
Re <- exp(-1*Entropy)
Reint <- as.integer(Re)
eig2 <- eig[1:Reint]
FractRankVar<-eig[Reint+1]*(Re-Reint)
ProductEffRankEigen<-prod(eig2)*FractRankVar
SGVre <- prod(eig)^(1/Re)
Rel.Disp <- function(x){
eig <- eigen(x)$values
p <- length(eig)
eigscale <- (eig)/(sum(eig))
Entropy <-sum((eigscale)*(log(eigscale)))
Re <- exp(-1*Entropy)
Reint <- as.integer(Re)
eig2 <- eig[1:Reint]
FractRankVar<-eig[Reint+1]*(Re-Reint)
ProductEffRankEigen<-prod(eig2)*FractRankVar
SGVre <- prod(eig)^(1/Re)
EffDis <- sqrt(SGVre)
Rel.Disp <- (EffDis)/(sqrt((1)/(pi*Re)))
}
Rel.Disp(x)
Rel.Disp <- function(x){
eig <- eigen(x)$values
p <- length(eig)
eigscale <- (eig)/(sum(eig))
Entropy <-sum((eigscale)*(log(eigscale)))
Re <- exp(-1*Entropy)
Reint <- as.integer(Re)
eig2 <- eig[1:Reint]
FractRankVar<-eig[Reint+1]*(Re-Reint)
ProductEffRankEigen<-prod(eig2)*FractRankVar
SGVre <- prod(eig)^(1/Re)
EffDis <- sqrt(SGVre)
Rel.Disp <- (EffDis)/(sqrt((1)/(pi*Re)))
Rel.Disp
}
Rel.Disp(x)
p <- seq(1,100,10)
p <- seq(1,100,9)
p <- seq(1,250,10)
n <- seq(1,250,10)
pi
p <- seq(1,250,10)
n <- seq(1,250,10)
Rel.Disp.Sim <- lapply(1:length(n), function(i){
lapply(1:length(p), function(i){
Sigma <-  matrix(0,p[j],p[j]); diag(Sigma) <- 1
mu <- c(rep(0,p[j]))
data <- mvrnorm(n[i], mu, Sigma)
Reldisp <- Rel.Disp(cov(data))
})
})
Rel.Disp.Sim <- lapply(1:length(n), function(i){
lapply(1:length(p), function(j){
Sigma <-  matrix(0,p[j],p[j]); diag(Sigma) <- 1
mu <- c(rep(0,p[j]))
data <- mvrnorm(n[i], mu, Sigma)
Reldisp <- Rel.Disp(cov(data))
})
})
Rel.Disp.Sim <- lapply(1:length(n), function(i){
lapply(1:length(p), function(j){
Sigma <-  matrix(0,p[j],p[j]); diag(Sigma) <- 1
mu <- c(rep(0,p[j]))
data <- mvrnorm(n[i], mu, Sigma)
#Reldisp <- Rel.Disp(cov(data))
})
})
nsets <- 100
Rel.Disp.Sim <- sapply(1:length(n), function(j){
lapply(1:length(p), function(i){
mydat <-lapply(1:nsets, function(i) mvrnorm(n = n[j], mu = rep(0,p[h]),
Sigma = diag(1,p[h])))
RelDisp <- unlist(lapply(1:nsets, function(k){
RelDisp <- Rel.Disp(mydat[[k]])
}))
})
})
Rel.Disp.Sim <- sapply(1:length(n), function(j){
lapply(1:length(p), function(h){
mydat <-lapply(1:nsets, function(i) mvrnorm(n = n[j], mu = rep(0,p[h]),
Sigma = diag(1,p[h])))
RelDisp <- unlist(lapply(1:nsets, function(k){
RelDisp <- Rel.Disp(mydat[[k]])
}))
})
})
p <- seq(10,250,10)
n <- seq(10,250,10)
Rel.Disp.Sim <- sapply(1:length(n), function(j){
lapply(1:length(p), function(h){
mydat <-lapply(1:nsets, function(i) mvrnorm(n = n[j], mu = rep(0,p[h]),
Sigma = diag(1,p[h])))
RelDisp <- unlist(lapply(1:nsets, function(k){
RelDisp <- Rel.Disp(mydat[[k]])
}))
})
})
Rel.Disp.Sim <- sapply(1:length(n), function(j){
lapply(1:length(p), function(h){
Sigma <- matrix(0.1,p[h],p[h])
mydat <-lapply(1:nsets, function(i) mvrnorm(n = n[j], mu = rep(0,p[h]),
Sigma = Sigma))
RelDisp <- unlist(lapply(1:nsets, function(k){
RelDisp <- Rel.Disp(mydat[[k]])
}))
})
})
Rel.Disp.Sim <- sapply(1:length(n), function(j){
lapply(1:length(p), function(h){
Sigma <- matrix(0.5,p[h],p[h])
mydat <-lapply(1:nsets, function(i) mvrnorm(n = n[j], mu = rep(0,p[h]),
Sigma = Sigma))
RelDisp <- unlist(lapply(1:nsets, function(k){
RelDisp <- Rel.Disp(mydat[[k]])
}))
})
})
Sigma <- diag(1,10,10)
mu <- rep(0,10)
x <- mvrnorm(10,mu,Sigma)
eig <- eigen(x)$values
p <- length(eig)
eigscale <- (eig)/(sum(eig))
Entropy <-sum((eigscale)*(log(eigscale)))
Re <- exp(-1*Entropy)
Reint <- as.integer(Re)
eig2 <- eig[1:Reint]
Sigma <- matrix(0.5,p[h],p[h])
mu <- rep(0,10)
x <- mvrnorm(10,mu,Sigma)
Sigma <- matrix(0.5,10,10)
mu <- rep(0,10)
x <- mvrnorm(10,mu,Sigma)
eig <- eigen(x)$values
p <- length(eig)
eigscale <- (eig)/(sum(eig))
Entropy <-sum((eigscale)*(log(eigscale)))
Re <- exp(-1*Entropy)
Reint <- as.integer(Re)
Re
eig2 <- eig[1:Reint]
FractRankVar<-eig[Reint+1]*(Re-Reint)
ProductEffRankEigen<-prod(eig2)*FractRankVar
SGVre <- prod(eig)^(1/Re)
EffDis <- sqrt(SGVre)
Rel.Disp <- (EffDis)/(sqrt((1)/(pi*Re)))
Rel.Disp
mu <- rep(0,15)
x <- mvrnorm(15,mu,Sigma)
Sigma <- matrix(0.5,10,15)
mu <- rep(0,15)
x <- mvrnorm(15,mu,Sigma)
Sigma <- matrix(0.5,15,10)
x <- mvrnorm(15,mu,Sigma)
Sigma <- matrix(0.5,15,15)
x <- mvrnorm(15,mu,Sigma)
eig <- eigen(x)$values
p <- length(eig)
eigscale <- (eig)/(sum(eig))
Entropy <-sum((eigscale)*(log(eigscale)))
Re <- exp(-1*Entropy)
Reint <- as.integer(Re)
eig2 <- eig[1:Reint]
FractRankVar<-eig[Reint+1]*(Re-Reint)
ProductEffRankEigen<-prod(eig2)*FractRankVar
SGVre <- prod(eig)^(1/Re)
EffDis <- sqrt(SGVre)
Rel.Disp <- (EffDis)/(sqrt((1)/(pi*Re)))
Rel.Disp
blogdown:::serve_site()
library(blogdown)
library(geomorph)
library(rrpp)
library(RRPP)
set.seed(1234)
c <- c(seq(0.0, 0.9, by = 0.1))
Sigma <- matrix(sample(c, replace = TRUE), nrow = 10, ncol = 10); diag(Sigma) <- 1
Sigma <- nearPD(Sigma, keepDiag = TRUE)
library(MASS)
Sigma <- nearPD(Sigma, keepDiag = TRUE)
library(matrix)
install.packages("Matrix")
library(Matrix)
Sigma <- nearPD(Sigma, keepDiag = TRUE)
r <- c(seq(1, 250, by = 1))
r <- c(seq(250, 500, by = 1))
mu1 <- c(sample(r, 10, replace = TRUE))
mu2 <- c(sample(r, 10, replace = TRUE))
Nonstanddata <- rbind(mvrnorm(50, mu1, Sigma$mat), mvrnorm(50, mu2, Sigma$mat))
View(Nonstanddata)
library(evolqg)
A <- standardize(Nonstanddata[1:50,], centerFun = mean)
install.packages("robustHD")
library(robustHD)
A <- standardize(Nonstanddata[1:50,], centerFun = mean)
B <- standardize(Nonstanddata[51:100,], centerFun = mean)
Standdata <- rbind(A, B)
CalcICV(cov(Nonstanddata))
CalcICV(cov(Sstanddata))
CalcICV(cov(Standdata))
load("C:/Users/macon/Dropbox/IN PROGRESS/RelVe-Simulation/Releig.RData")
load("C:/Users/macon/Dropbox/IN PROGRESS/RelVe-Simulation/Prop.sig.results.P16N128.Rdata")
load("C:/Users/macon/Dropbox/IN PROGRESS/RelVe-Simulation/Z_Vrel_NP.RData")
library(devtools)
devtools::install_github("geomorphR/geomorph", ref = "Stable", build_vignettes = TRUE)
library(geomorph)
data("plethodon")
lmks <- gpagen(plethodon$land, print.progress = F)$coords
spec <- plethodon$species
site <- plethodon$site
data <- geomorph.data.frame(lmks, spec = spec, site = site)
data$Group <- interaction(data$site, data$species)
View(data)
data$Group <- interaction(data$site, data$spec)
View(data)
data <- geomorph.data.frame(lmks, spec = spec, site = site)
fit <- procD.lm(lmks ~ spec * site,
data = data, iter = 999, turbo = TRUE,
RRPP = TRUE, print.progress = FALSE)
data$Group <- interaction(data$site, data$spec)
pairs <- pairwise(fit, groups = gdf$Group)
pairs <- pairwise(fit, groups = data$Group)
summary(pairs)
library(geomorph)
library(geomorph)
data("plethodon")
lmks <- gpagen(plethodon$land, print.progress = F)$coords
spec <- plethodon$species
site <- plethodon$site
data <- geomorph.data.frame(lmks, spec = spec, site = site)
fit <- procD.lm(lmks ~ spec * site,
data = data, iter = 999, turbo = TRUE,
RRPP = TRUE, print.progress = FALSE)
data$Group <- interaction(data$site, data$spec)
pairs <- pairwise(fit, groups = data$Group)
View(pairs)
pairs$n
pairs$PermInfo
pairs$PermInfo
A <- pairs$PermInfo
View(A)
View(pairs)
library(geomorph)
data("mosquito")
mosquito$side
library(geomorph)
library(rmarkdown)
setwd("C:/Users/macon/Dropbox/IN PROGRESS/GeomorphTutorials/Tutorials")
render_site()
install.packages("plotly")
library(plotly)
library(geomorph)
data("lizards")
data("mosquito")
data("scallops")
scallop <- plot(scallop.sym)
plot_ly(data = scallop)
plot_geo(data = scallop)
detach("package:plotly", unload = TRUE)
library(rgl)
setwd("C:/Users/macon/Dropbox/IN PROGRESS/GeomorphTutorials/Tutorials")
library(geomorph)
data("plethodon")
View(plethodon)
library(geomorph)
View(plethodon)
library(geomorph)
library(rmarkdown)
render_site("C:/Users/macon/Dropbox/IN PROGRESS/GeomorphTutorials/Tutorials")
