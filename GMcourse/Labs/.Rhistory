## Overall Integration
data("plethodon")
Y.gpa <- gpagen(plethodon$land, print.progress = FALSE)
#Separate data by species
coords.gp <- coords.subset(Y.gpa$coords, plethodon$species)
#Z_Vrel by species
Vrel.gp <- Map(function(x) integration.Vrel(x), coords.gp)
compare.ZVrel(Vrel.gp$Jord, Vrel.gp$Teyah)
## Integration Across Spatial Scales
globalIntegration(Y.gpa$coords) #data are not spatially integrated
## Integration Among Subsets
data(pupfish) # GPA previously performed
group <- factor(paste(pupfish$Pop, pupfish$Sex, sep = "."))
# Subset 3D array by group, returning a list of 3D arrays
tail.LM <- c(1:3, 5:9, 18:38)
head.LM <- (1:56)[-tail.LM]
tail.coords <- pupfish$coords[tail.LM,,]
head.coords <- pupfish$coords[head.LM,,]
IT <- integration.test(tail.coords, head.coords, print.progress = F)
summary(IT)
plot(IT)
land.gp <- rep(1,56); land.gp[tail.LM] <- 2
integration.test(pupfish$coords, partition.gp=land.gp, print.progress = FALSE)
two.b.pls(tail.coords, head.coords, print.progress = FALSE)
## Comparing the Strength of Integration
tail.coords.gp <- coords.subset(tail.coords, group)
head.coords.gp <- coords.subset(head.coords, group)
# Obtain Integration for groups
integ.tests <- Map(function(x,y) integration.test(x, y, iter=499,
print.progress = FALSE), head.coords.gp, tail.coords.gp)
compare.pls(integ.tests)
## Tests of Modularity
MT <- modularity.test(pupfish$coords,land.gp,CI=FALSE,print.progress = FALSE)
summary(MT)
plot(MT)
## Comparing the Strength of Modularity
coords.gp <- coords.subset(pupfish$coords, group)
modul.tests <- Map(function(x) modularity.test(x, coords.gp,print.progress = FALSE), coords.gp)
modul.tests <- Map(function(x) modularity.test(x, coords.gp,print.progress = FALSE)
?compare.CR
?compare.CR
modul.tests <- Map(function(x) modularity.test(x, coords.gp,print.progress = FALSE), coords.gp)
group
coords.gp
modul.tests <- Map(function(x) modularity.test(x, land.gp,print.progress = FALSE), coords.gp)
compare.CR(modul.tests, CR.null = FALSE)
## Comparing Alternative Modular Partitions
land.gps3 <- rep('a',56); land.gps3[39:48]<-'b'; land.gps3[c(6:9,28:38)] <- 'c'
#3 module hypothesis (tail now a module)
land.gps4 <- rep('a',56); land.gps4[39:48]<-'b'; land.gps4[c(6:9,28:38)] <- 'c';
land.gps4[c(10,49:56)] <- 'd'  #4 module hypothesis (eye now a module)
m3.test <- modularity.test(coords.gp$Marsh.F,land.gps3, iter = 499, print.progress = FALSE)
m4.test <- modularity.test(coords.gp$Marsh.F,land.gps4, iter = 499, print.progress = FALSE)
model.Z <- compare.CR(m3.test,m4.test, CR.null = TRUE)
model.Z
library(geomorph)
library(geiger)
data(plethspecies)
Y.gpa <- gpagen(plethspecies$land)
PCA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy,
align.to.phy = FALSE,
GLS = FALSE)
summary(PCA)
PCA$rot # loadings
PCAplot <- plot(PCA, pch = 16, phylo = TRUE)
# Explore shape change in the plot
picknplot.shape(PCAplot)
# In case one wishes to use results for other reasons:
attributes(PCA)
PCA$d
eigen(var(PCA$x), only.values = TRUE)$values
PACA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy,
align.to.phy = TRUE,
GLS = FALSE)
summary(PACA)
PACA <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy,
align.to.phy = TRUE,
GLS = FALSE)
summary(PACA)
PACA$rot # loadings
PACAplot <- plot(PACA, pch = 16, phylo = TRUE)
PACA
data("plethShapeFood")
Y.gpa <- gpagen(plethShapeFood$land)
food <- plethShapeFood$food
rownames(food) <- names(Y.gpa$Csize)
PLSfood <- two.b.pls(food, Y.gpa$coords,
iter = 9999)
PLSallometry <- two.b.pls(Y.gpa$Csize, Y.gpa$coords,
iter = 9999)
PLSintegration <- two.b.pls(Y.gpa$coords[1:5,, ],
Y.gpa$coords[8:13,,],
iter = 9999)
summary(PLSfood)
attributes(PLSfood)
foodPlot <- plot(PLSfood, pch = 16)
hist(PLSfood$random.r, breaks = 50,
col = "olivedrab1",
main = "Sampling distribution of r")
abline(v = PLSfood$r.pls, lwd = 2, col = "skyblue4")
summary(PLSallometry)
allomPlot <- plot(PLSallometry, pch = 16)
summary(PLSintegration)
integPlot <- plot(PLSintegration, pch = 16)
compare.pls(PLSfood,
PLSallometry,
PLSintegration)
fit.null <- procD.lm(coords ~ 1, data = Y.gpa,
iter = 9999)
fit.alt <- procD.lm(coords ~ log(Csize), data = Y.gpa,
iter = 9999)
model.matrix(fit.null)
coef(fit.null)
fitted(fit.null)
resid(fit.null)
model.matrix(fit.alt)
coef(fit.alt)
fitted(fit.alt)
resid(fit.alt)
## Hypothesis tests
coef(fit.alt, test = TRUE)
fit.alt <- procD.lm(coords ~ log(Csize), data = Y.gpa,
turbo = FALSE,
iter = 9999,
Parallel = TRUE)
coef(fit.alt, test = TRUE)
anova(fit.null, fit.alt)
anova(fit.alt)
attributes(fit.alt)
data(pupfish)
plotAllSpecimens(pupfish$coords)  #NOTE: already GPA-aligned
#Y.gpa <- gpagen(pupfish$coords, print.progress = FALSE)    #GPA-alignment
pupfish$logSize <- log(pupfish$CS)
pupfish$Group <- interaction(pupfish$Pop, pupfish$Sex)
fit <- procD.lm(coords ~ logSize, data = pupfish, print.progress = FALSE)
anova(fit)
#plots
plot(fit, type = "regression", reg.type = "PredLine", predictor = pupfish$logSize, pch = 19)
plot(fit, type = "regression", reg.type = "RegScore", predictor = pupfish$logSize, pch = 19)
plotAllometry(fit, size = pupfish$logSize, logsz = FALSE, method = "CAC", pch = 19)
M <- mshape(pupfish$coords)
preds <- shape.predictor(fit$GM$fitted, x= pupfish$logSize, Intercept = TRUE,
predmin = min(pupfish$logSize),
predmax = max(pupfish$logSize))
par(mfrow=c(1,2))
plotRefToTarget(M, preds$predmin, mag=1)
mtext("Regression Min")
plotRefToTarget(M, preds$predmax, mag=1)
mtext("Regression Max")
par(mfrow=c(1,1))
## 2B: Group allometry
fit.common <- procD.lm(coords ~ logSize + Group,
data = pupfish, print.progress = FALSE)
fit.unique <- procD.lm(coords ~ logSize * Group,
data = pupfish, print.progress = FALSE)
anova(fit.unique)
### Pairwise Comparisons
slope.pw <- pairwise(fit.unique, fit.null = fit.common,
groups = pupfish$Group,
covariate = pupfish$logSize, print.progress = FALSE)
summary(slope.pw, test.type = "VC", angle.type = "deg") # angular differences
summary(slope.pw, test.type = "dist", angle.type = "deg") # amount of shape change differences
par(mfcol = c(1,2))
plot(fit.common, type = "regression", predictor = pupfish$logSize,
reg.type = "PredLine", pch=19, col = pupfish$Group)
legend("topleft", levels(pupfish$Group), pch = 21, pt.bg = unique(pupfish$Group))
mtext("Common Slopes")
plot(fit.unique, type = "regression", predictor = pupfish$logSize,
reg.type = "PredLine", pch=19, col = pupfish$Group)
legend("topleft", levels(pupfish$Group), pch = 21, pt.bg = unique(pupfish$Group))
mtext("Unique Slopes")
par(mfcol = c(1,1))
data(pupfish) # GPA already performed
fit0 <- procD.lm(coords ~ 1, data = pupfish, iter = 999)
fit1 <- procD.lm(coords ~ log(CS), data = pupfish, iter = 999)
fit2 <- procD.lm(coords ~ Sex, data = pupfish, iter = 999)
fit3 <- procD.lm(coords ~ Pop, data = pupfish, iter = 999)
fit4 <- procD.lm(coords ~ log(CS) + Sex, data = pupfish, iter = 999)
fit5 <- procD.lm(coords ~ log(CS) + Pop, data = pupfish, iter = 999)
fit6 <- procD.lm(coords ~ log(CS) * Sex, data = pupfish, iter = 999)
fit7 <- procD.lm(coords ~ log(CS) * Pop, data = pupfish, iter = 999)
fit8 <- procD.lm(coords ~ Sex * Pop, data = pupfish, iter = 999)
fit9 <- procD.lm(coords ~ log(CS) + Sex*Pop, data = pupfish, iter = 999)
fit10 <- procD.lm(coords ~ log(CS) * Sex*Pop, data = pupfish, iter = 999)
model.matrix(fit0)
coef(fit0)
model.matrix(fit1)
coef(fit1)
model.matrix(fit2)
coef(fit2)
model.matrix(fit3)
coef(fit3)
unique(model.matrix(fit2)) %*% coef(fit2)[,1:4]
model.matrix(fit2) %*% coef(fit2)[,1:4]
fitted(fit2)[, 1:4]
anova(fit8, effect.type = "Rsq")
anova(fit8, effect.type = "F")
reveal.model.designs(fit8)
fitm <- manova.update(fit8)
summary(fitm)
summary(fitm, test = "Pillai")
group <- interaction(pupfish$Pop, pupfish$Sex)
PW <- pairwise(fit8, groups = group)
summary(PW)
summary(PW, stat.table = FALSE)
coef(fit10)[, 1:2]
# Analyses
group <- interaction(pupfish$Pop, pupfish$Sex)
PW <- pairwise(fit10, groups = group,
covariate = log(pupfish$CS))
summary(PW)
summary(PW, test.type = "VC")
summary(PW, test.type = "VC", angle.type = "deg")
TA <- trajectory.analysis(fit8, group = pupfish$Pop,
traj.pts = pupfish$Sex)
summary(TA)
summary(TA, attribute = "TC")
TP <- plot(TA, pch = as.numeric(Pupfish$Pop) + 20, bg = as.numeric(Pupfish$Sex),
cex = 0.7, col = "gray")
add.trajectories(TP, traj.pch = c(21, 22), start.bg = 1, end.bg = 2)
legend("topright", levels(Pupfish$Pop), pch =  c(21, 22), pt.bg = 1)
PW <- pairwise(fit8, groups = group)
summary(PW, test.type = "var")
modComp1 <- model.comparison(fit1, fit2, fit3, fit4, fit5,
fit6, fit7, fit8, fit9, fit10, type = "cov.trace")
modComp2 <- model.comparison(fit1, fit2, fit3, fit4, fit5,
fit6, fit7, fit8, fit9, fit10, type = "logLik", tol = 0.01)
summary(modComp1)
summary(modComp2)
plot(modComp1)
plot(modComp2)
