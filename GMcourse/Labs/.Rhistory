# simple allometry
data(plethodon)
library(geomorph)
# simple allometry
data(plethodon)
Y.gpa <- gpagen(plethodon$land, print.progress = FALSE)    #GPA-alignment
gdf <- geomorph.data.frame(Y.gpa, site = plethodon$site,
species = plethodon$species)
fit <- procD.lm(coords ~ log(Csize), data=gdf, iter=999, print.progress = FALSE)
anova(fit)
# Predline
plotAllometry(fit, size = gdf$Csize, logsz = TRUE, method = "PredLine", pch = 19)
# same as
logSize <- log(gdf$Csize)
plot(fit, type = "regression", reg.type = "PredLine", predictor = logSize, pch = 19)
# RegScore
plotAllometry(fit, size = gdf$Csize, logsz = TRUE, method = "RegScore", pch = 19)
# Predline
plotAllometry(fit, size = gdf$Csize, logsz = TRUE, method = "PredLine", pch = 19)
?plotAllometry
# RegScore
plotAllometry(fit, size = gdf$Csize, logsz = TRUE, method = "RegScore", pch = 19)
# same as
plot(fit, type = "regression", reg.type = "RegScore", predictor = logSize, pch = 19)
# CAC
plotAllometry(fit, size = gdf$Csize, logsz = TRUE, method = "CAC", pch = 19)
fit.unique <- procD.lm(coords ~ Csize * species * site, data=gdf, iter=999, print.progress = FALSE)
fit.common <- procD.lm(coords ~ Csize + species * site, data=gdf, iter=999, print.progress = FALSE)
anova(fit.common, fit.unique, print.progress = FALSE)
anova(fit.unique)
data(pupfish)
plotAllSpecimens(pupfish$coords)
plotAllSpecimens(pupfish$coords)
Y.gpa <- gpagen(pupfish$land, print.progress = FALSE)    #GPA-alignment
Y.gpa <- gpagen(pupfish$coords, print.progress = FALSE)    #GPA-alignment
Y.gpa <- gpagen(pupfish$coords, print.progress = FALSE)    #GPA-alignment
Y.gpa$Csize
anova(fit)
pupfish$CS
fit <- procD.lm(coords ~ logSize, data = pupfish, print.progress = FALSE)
data(pupfish)
plotAllSpecimens(pupfish$coords)  #NOTE: already GPA-aligned
#Y.gpa <- gpagen(pupfish$coords, print.progress = FALSE)    #GPA-alignment
pupfish$logSize <- log(pupfish$CS)
pupfish$Group <- interaction(pupfish$Pop, pupfish$Sex)
fit <- procD.lm(coords ~ logSize, data = pupfish, print.progress = FALSE)
anova(fit)
# Predline
plotAllometry(fit, size = pupfish$logSize, logsz = FALSE, method = "PredLine", pch = 19)
# same as
plot(fit, type = "regression", reg.type = "PredLine", predictor = logSize, pch = 19)
# Predline
plot(fit, type = "regression", reg.type = "PredLine", predictor = logSize, pch = 19)
# RegScore
plot(fit, type = "regression", reg.type = "RegScore", predictor = logSize, pch = 19)
# Predline
plot(fit, type = "regression", reg.type = "PredLine", predictor = logSize, pch = 19)
# Predline
plot(fit, type = "regression", reg.type = "PredLine", predictor = pupfish$logSize, pch = 19)
# RegScore
plot(fit, type = "regression", reg.type = "RegScore", predictor = pupfish$logSize, pch = 19)
# CAC
plotAllometry(fit, size = pupfish$logSize, logsz = FALSE, method = "CAC", pch = 19)
?plot.procD.lm
## group allometries
fit.common <- procD.lm(coords ~ logSize + Group,
data = pupfish, print.progress = FALSE)
fit.unique <- procD.lm(coords ~ logSize * Group,
data = pupfish, print.progress = FALSE)
anova(fit.unique)
pupfish$Group
slope.pw <- pairwise(fit.unique, fit.null = fit.common,
groups = pupfish$Group,
covariate = pupfish$logSize, print.progress = FALSE)
summary(slope.pw, test.type = "VC", angle.type = "deg") # angular differences
summary(slope.pw, test.type = "dist", angle.type = "deg") # amount of shape change differences
plot(fit.common, type = "regression", predictor = pupfish$logSize,
reg.type = "PredLine", pch=19, col = pupfish$Group)
legend("topleft", levels(pupfish$Group), pch = 21, pt.bg = unique(pupfish$Group))
mtext("Common Slopes")
plot(fit.unique, type = "regression", predictor = pupfish$logSize,
reg.type = "PredLine", pch=19, col = pupfish$Group)
legend("topleft", levels(pupfish$Group), pch = 21, pt.bg = unique(pupfish$Group))
mtext("Unique Slopes")
###
# CAC (should not change from last time; model change has no effect)
plotAllometry(fit.unique, size = pupfish$logSize, logsz = FALSE, method = "CAC", pch = 19)
# Predline
plotAllometry(fit.unique, size = pupfish$logSize, logsz = FALSE, method = "PredLine",
pch = 19, col = as.numeric(interaction(gdf$species, gdf$site)))
###
pc.plot <- plotAllometry(fit.unique, size = pupfish$logSize, logsz = FALSE, method = "size.shape",
pch = 19, col = as.numeric(interaction(gdf$species, gdf$site)))
summary(pc.plot$size.shape.PCA)
M <- mshape(Y.gpa$coords)
preds <- shape.predictor(fit$GM$fitted, x= pupfish$logSize, Intercept = FALSE,
predmin = min(pupfish$logSize),
predmax = max(pupfish$logSize))
plotRefToTarget(M, preds$predmin, mag=1)
plotRefToTarget(M, preds$predmax, mag=1)
plotRefToTarget(M, preds$predmin, mag=3)
plotRefToTarget(M, preds$predmax, mag=3)
pupfish$logSize
pupfish$CS
log(pupfish$CS)
preds <- shape.predictor(fit$GM$fitted, x= pupfish$logSize, Intercept = TRUE,
predmin = min(pupfish$logSize),
predmax = max(pupfish$logSize))
plotRefToTarget(M, preds$predmin, mag=3)
plotRefToTarget(M, preds$predmax, mag=3)
plotRefToTarget(M, preds$predmin, mag=1)
plotRefToTarget(M, preds$predmax, mag=1)
plethtree <- read.tree('LectureData/09.pcm/plethtree.tre')
library(geomorph)
library(geiger)
plethtree <- read.tree('LectureData/09.pcm/plethtree.tre')
plethtree <- read.tree('Data/plethtree.tre')
plethland <- readland.tps('Data/PlethodonLand.tps',specID = "ID",
warnmsg = FALSE)
Y.gpa <- gpagen(plethland, print.progress = FALSE)
M <- mshape(Y.gpa$coords)
svl <- Y.gpa$Csize
shape <- Y.gpa$coords
gps <- read.csv('Data/PlethGps.csv', header=TRUE, row.names=1)
shape.test <- treedata(phy = plethtree, data = two.d.array(shape), warnings = TRUE)
data.matched <- treedata(phy = plethtree, data = gps, warnings=FALSE)
elev <- as.factor(data.matched$data); names(elev) <- row.names(data.matched$data)
gdf <- geomorph.data.frame(shape=shape, svl=svl,elev = elev, plethtree=plethtree)
links <- matrix(c(4,3,2,1,1,6,7,8,9,10,1,1,11,5,5,4,2,3,7,8,9,10,11,9,10,1),
ncol=2,byrow=FALSE)
plot(ladderize(plethtree),edge.width=3)
axisPhylo(1)
mtext("Phylogeny")
library(geomorph)
library(geiger)
plethtree <- read.tree('Data/plethtree.tre')
plot(plethtree)
dat <- read.csv('Data/svl.csv', header=TRUE, row.names=1)
svl
pgls.reg <- procD.pgls(f1 = shape~svl, phy=plethtree, data=gdf, print.progress = FALSE)
summary(pgls.reg)
allom.plot <- plot(pgls.reg, type = "regression", predictor = gdf$svl,
reg.type ="RegScore", pch=19, cex=1.5, xlab = "SVL") # make sure to have a predictor
fit.line <- lm(allom.plot$RegScore~gdf$svl)
abline(fit.line,col = "red")
preds <- shape.predictor(pgls.reg$GM$pgls.fitted, x= allom.plot$RegScore, Intercept = FALSE,
predmin = min(allom.plot$RegScore),
predmax = max(allom.plot$RegScore))
M <- mshape(shape)
plotRefToTarget(M, preds$predmin, mag=3, links = links)
plotRefToTarget(M, preds$predmax, mag=3, links = links)
plotRefToTarget(M, preds$predmin, mag=3, links = links)
mtext("Min")
plotRefToTarget(M, preds$predmax, mag=3, links = links)
mtext("Max")
pgls.aov <- procD.pgls(f1 = shape~elev, phy=plethtree, data=gdf, print.progress = FALSE)
summary(pgls.aov)
plot.res <- gm.prcomp(shape,phy=plethtree, data=gdf)
plot.res <- gm.prcomp(shape,phy=plethtree)
plot(plot.res,phylo = FALSE, pch=21, bg=gdf$elev, cex=2)
legend("topleft", pch=21, pt.bg = unique(gdf$elev), legend = levels(gdf$elev))
ord.plot <- plot(plot.res,phylo = FALSE, pch=21, bg=gdf$elev, cex=1.5)
shapeHulls(ord.plot, groups = gdf$elev,
group.cols = c("red", "black"),
group.lwd = rep(1, 2), group.lty = c(2, 1))
plot.res <- gm.prcomp(shape,phy=plethtree)
ord.plot <- plot(plot.res,phylo = FALSE, pch=21, bg=gdf$elev, cex=1.5)
shapeHulls(ord.plot, groups = gdf$elev,
group.cols = c("red", "black"),
group.lwd = rep(1, 2), group.lty = c(2, 1))
plot(plot.res,phylo = FALSE, pch=21, bg=gdf$elev, cex=2)
shapeHulls(ord.plot, groups = gdf$elev,
group.cols = c("red", "black"),
group.lwd = rep(1, 2), group.lty = c(2, 1))
plot.res <- gm.prcomp(shape,phy=plethtree)
plot(plot.res,phylo = FALSE, pch=21, bg=gdf$elev, cex=2)
shapeHulls(ord.plot, groups = gdf$elev,
group.cols = c("red", "black"),
group.lwd = rep(1, 2), group.lty = c(2, 1))
legend("topleft", pch=21, pt.bg = unique(gdf$elev), legend = levels(gdf$elev))
Low <- c(1) # design for low elevation
High <- c(0) # design for high elevation
preds <- shape.predictor(arrayspecs(pgls.aov$pgls.fitted, 11, 2), x = pgls.aov$X[,-1],
Intercept = TRUE, Low = Low, High = High)
par(mfrow=c(1,2))
plotRefToTarget(M, preds$Low, mag=2, links=links)
mtext("Low Elevation")
plotRefToTarget(M, preds$High, mag=2, links=links)
mtext("High Elevation")
par(mfrow=c(1,1))
land.gps<-c("A","A","A","A","A","B","B","B","B","B","B")
PLS.Y <- phylo.integration(A = gdf$shape, partition.gp = land.gps, phy= plethtree, print.progress = FALSE)
summary(PLS.Y)
plot(PLS.Y)
PS.shape <- physignal(A=shape,phy=plethtree,iter=999, print.progress = FALSE)
summary(PS.shape)
plot(PS.shape)
