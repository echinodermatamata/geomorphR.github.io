gp2<-c(rep(1,12),rep(2,10))
EMR<-compare.multi.evol.rates(A=cbind(A1,A2),gp=gp, Subset=TRUE, phy= plethspecies$phy,iter=999)
EMR2<-compare.multi.evol.rates(A=cbind(A2,A1),gp=gp2, Subset=TRUE, phy= plethspecies$phy,iter=999)
summary(EMR)
summary(EMR2)
EMR<-compare.multi.evol.rates(A=cbind(A1,A2),gp=gp, Subset=FALSE, phy= plethspecies$phy,iter=999)
EMR2<-compare.multi.evol.rates(A=cbind(A2,A1),gp=gp2, Subset=FALSE, phy= plethspecies$phy,iter=999)
EMR<-compare.multi.evol.rates(A=cbind(A1,A2),gp=gp, Subset=TRUE, phy= plethspecies$phy,iter=999)
EMR2<-compare.multi.evol.rates(A=cbind(A2,A1),gp=gp2, Subset=TRUE, phy= plethspecies$phy,iter=999)
summary(EMR)
summary(EMR2)
EMR3<-compare.multi.evol.rates(A=cbind(A1,A2),gp=gp, Subset=FALSE, phy= plethspecies$phy,iter=999)
EMR4<-compare.multi.evol.rates(A=cbind(A2,A1),gp=gp2, Subset=FALSE, phy= plethspecies$phy,iter=999)
summary(EMR3)
summary(EMR4)
library(geomorph)
?globalIntegration
data(plethodon)
Y.gpa<-gpagen(plethodon$land)    #GPA-alignment
globalIntegration(Y.gpa$coords)
library(geomorph)
?gm.prcomp
data(plethspecies)
Y.gpa <- gpagen(plethspecies$land)    #GPA-alignment
### PCA
pleth.raw <- gm.prcomp(Y.gpa$coords)
summary(pleth.raw)
### PCA with phylogeny (result is same as above, but with additional components)
pleth.phylo <- gm.prcomp(Y.gpa$coords, phy = plethspecies$phy)
summary(pleth.phylo)
#### Plotting
plot(pleth.raw)
gps <- as.factor(c(rep("gp1", 5), rep("gp2", 4))) # Two random groups
par(mar=c(2, 2, 2, 2))
plot(pleth.raw, pch=22, cex = 1.5, bg = gps) # Modify options as desired
#  Add things as desired using standard R plotting
text(par()$usr[1], 0.1*par()$usr[3], labels = "PC1 - 45.64%", pos = 4, font = 2)
text(0, 0.95*par()$usr[4], labels = "PC2 - 18.80%", pos = 4, font = 2)
legend("topleft", pch=22, pt.bg = unique(gps), legend = levels(gps))
### Phylomorphospace plot
plot(pleth.phylo, pch=21, bg=1:nrow(pleth.phylo$x), phylo = TRUE,
phylo.par = list(edge.color="grey", node.cex=0)); title(main="phylomorphospace")
text(pleth.phylo$x, labels = labels(pleth.phylo$x)[[1]],
pos = 2, font = 4)
text(pleth.phylo$anc.x, labels = 1:nrow(pleth.phylo$anc.x),
adj = c(-0.1, -0.1), font = 2)
picknplot.shape(plot(pleth.phylo))
devtools::install_github('geomorphR/geomorph', ref="Develop")
library(geomorph)
?procD.lm
data(plethodon)
Y.gpa <- gpagen(plethodon$land)    #GPA-alignment
gdf <- geomorph.data.frame(Y.gpa,
site = plethodon$site,
species = plethodon$species) # geomorph data frame
fit1 <- procD.lm(coords ~ species * site,
data = gdf, iter = 249,
RRPP = FALSE, print.progress = FALSE)
fit2 <- procD.lm(coords ~ species * site,
data = gdf, iter = 999,
RRPP = FALSE, print.progress = FALSE)
summary(fit1)
summary(fit2)
fit1 <- procD.lm(coords ~ species * site,
data = gdf, iter = 49,
RRPP = FALSE, print.progress = FALSE)
summary(fit1)
fit1$PermInfo
library(geomorph)
data(plethodon)
Y.gpa <- gpagen(plethodon$land)
shape <- gpagen(plethodon$land)$coords
shape <- gpagen(plethodon$land, print.progress = FALSE)$coords
shape[,,1]-shape[1,,1]
shape[,,1]
shape[1,1:2,1]
shape[1,,1]
geomorph:::center
geomorph:::fast.center()
geomorph:::fast.center
m <- colMeans(shape)
m
x - rep.int(m, rep_len(n, p))
geomorph:::fast.center
rep.int
rep.int(m,rep_len(1,2))
rep.int(m,rep_len(1,12))
rep.int(m,2
)
m <- colMeans(shape[,,1])
m
rep.int(m,2)
shape[,,1]
rep.int(m, 12)
geomorph:::center
geomorph:::fast.center
geomorph:::center.scale
geomorph:::center(plethodon$land[,,1])
plethodonland[,,1]
plethodon$land[,,1]
geomorph:::center
geomorph:::fast.center
?rep.int
colMeans(shape[,,1])
colMeans(shape)
shape[1,,])
shape[1,,]
rep.int(m, rep_len(40, 12))
dim(plethodon$land)
shape[,,1]-m[1,]
m
m <- shape[1,,]
m
dim(m)
m[,1]
shape[,,1]-m[,1]
shape[,,1]
fixed.angle
y <- shape - matrix(ap, 12, 2, byrow = TRUE)
ap <- shape[1,,]
y <- shape - matrix(ap, 12, 2, byrow = TRUE)
matrix(ap, 12, 2, byrow = TRUE)
ap
shape[,,1]
shape[1,1]
shape[1,,1]
rep(shape[1,,1],12)
matrix(rep(shape[1,,1],12),2,byrow = TRUE)
matrix(shape[1,,1],12,2,byrow = TRUE)
shape[,,1]-matrix(shape[1,,1],12,2,byrow = TRUE)
shape.cent <- simplify2array(lapply(1:40, function(j) shape[,,j]-matrix(shape[1,,j],12,2,byrow = TRUE) )
)
shape.cent
plotAllSpecimens(shape.cent)
?fixed.angle
options(warn = -1)
angl<- sapply(1:n, function(j){
acos(crossprod(shape[5,,n]/sqrt(sum(shape[5,,n]^2)),
shape[6,,n]/sqrt(sum(shape[6,,n]^2))))
})
n=40; p=12;k=2
data(plethodon) #manually rotate jaw angle
n=40; p=12;k=2
shape <- gpagen(plethodon$land, print.progress = FALSE)$coords
shape.cent <- simplify2array(lapply(1:n, function(j) shape[,,j]-matrix(shape[1,,j],
plotAllSpecimens(shape.cent)
n=40; p=12;k=2
shape <- gpagen(plethodon$land, print.progress = FALSE)$coords
shape.cent <- simplify2array(lapply(1:n, function(j) shape[,,j]-matrix(shape[1,,j],
)
)
)
j=1
shape[,,j]
matrix(shape[1,,j],
p,k,byrow = TRUE) )
p
k
matrix(shape[1,,j],
p,k,byrow = TRUE)
simplify2array(lapply(1:n, function(j) shape[,,j]-matrix(shape[1,,j],
p,k,byrow = TRUE) ))
shape <- gpagen(plethodon$land, print.progress = FALSE)$coords
shape.cent <- simplify2array(lapply(1:n, function(j) shape[,,j]-matrix(shape[1,,j],
p,k,byrow = TRUE) ))
options(warn = -1)
angl<- sapply(1:n, function(j){
acos(crossprod(shape[5,,n]/sqrt(sum(shape[5,,n]^2)),
shape[6,,n]/sqrt(sum(shape[6,,n]^2))))
})
options(warn = 0)
angl<- sapply(1:n, function(j){
acos(crossprod(shape[5,,n]/sqrt(sum(shape[5,,n]^2)),
shape[6,,n]/sqrt(sum(shape[6,,n]^2))))
})
angl
angl<- sapply(1:n, function(j){
acos(crossprod(shape[5,,j]/sqrt(sum(shape[5,,j]^2)),
shape[6,,j]/sqrt(sum(shape[6,,j]^2))))
})
angl
y.gpa <-  gpagen(plethodon$land, print.progress = FALSE)$coords
shape <- fixed.angle(plethspecies$land,
art.pt=1, angle.pts.1 = 5,
angle.pts.2 = 6, rot.pts = c(2,3,4,5))
shape.cent <- simplify2array(lapply(1:n, function(j) shape[,,j]-matrix(shape[1,,j],
p,k,byrow = TRUE) ))
angl<- sapply(1:n, function(j){
acos(crossprod(shape[5,,j]/sqrt(sum(shape[5,,j]^2)),
shape[6,,j]/sqrt(sum(shape[6,,j]^2))))
})  #observed angles
shape
angl<- lapply(1:n, function(j){
acos(crossprod(shape[5,,j]/sqrt(sum(shape[5,,j]^2)),
shape[6,,j]/sqrt(sum(shape[6,,j]^2))))
})  #observed angles
shape[1,,]
shape <- fixed.angle(plethodon$land,
art.pt=1, angle.pts.1 = 5,
angle.pts.2 = 6, rot.pts = c(2,3,4,5))
angl<- sapply(1:n, function(j){
acos(crossprod(shape[5,,j]/sqrt(sum(shape[5,,j]^2)),
shape[6,,j]/sqrt(sum(shape[6,,j]^2))))
})  #observed angles
angl
shape <- fixed.angle(y.gpa$coords,
art.pt=1, angle.pts.1 = 5,
angle.pts.2 = 6, rot.pts = c(2,3,4,5))
shape <- fixed.angle(y.gpa,
art.pt=1, angle.pts.1 = 5,
angle.pts.2 = 6, rot.pts = c(2,3,4,5))
angl<- sapply(1:n, function(j){
acos(crossprod(shape[5,,j]/sqrt(sum(shape[5,,j]^2)),
shape[6,,j]/sqrt(sum(shape[6,,j]^2))))
})  #observed angles
angl
plotAllSpecimens(y.gpa)
plotAllspecimens(shape)
plotAllSpecimens(shape)
angl.orig<- sapply(1:n, function(j){
acos(crossprod(y.gpa[5,,j]/sqrt(sum(y.gpa[5,,j]^2)),
y.gpa[6,,j]/sqrt(sum(y.gpa[6,,j]^2))))
})  #observed angles
angl.fixed<- sapply(1:n, function(j){
acos(crossprod(shape[5,,j]/sqrt(sum(shape[5,,j]^2)),
shape[6,,j]/sqrt(sum(shape[6,,j]^2))))
})  #observed angles
angl.orig
angl.fixed
devtools::install_github('geomorphR/geomorph', ref="develop")
devtools::install_github('geomorphR/geomorph', ref="Develop")
library(geomorph)
?procD.lm
data(plethodon)
Y.gpa <- gpagen(plethodon$land)    #GPA-alignment
gdf <- geomorph.data.frame(Y.gpa,
site = plethodon$site,
species = plethodon$species) # geomorph data frame
fit1 <- procD.lm(coords ~ species * site,
data = gdf, iter = 999,
RRPP = FALSE, print.progress = FALSE)
data(plethodon)
Y.gpa <- gpagen(plethodon$land)    #GPA-alignment
gdf <- geomorph.data.frame(Y.gpa,
site = plethodon$site,
species = plethodon$species) # geomorph data frame
fit1 <- procD.lm(coords ~ species * site,
data = gdf, iter = 999,
RRPP = FALSE, print.progress = FALSE)
data(plethodon)
Y.gpa <- gpagen(plethodon$land)    #GPA-alignment
gdf <- geomorph.data.frame(Y.gpa,
site = plethodon$site,
species = plethodon$species) # geomorph data frame
fit2 <- procD.lm(coords ~ species * site,
data = gdf, iter = 29,
RRPP = FALSE, print.progress = FALSE)
summary(fit1)
summary(fit2)
?plot.pls
library(geomorph)
data(plethodon)
Y.gpa <- gpagen(plethodon$land, print.progress = FALSE)
new <-Y.gpa$coords
for (i in 1:dim(Y.gpa$coords)[[3]]){
tmp <- fixed.angle(Y.gpa$coords,art.pt=1, angle.pts.1 = 5, angle.pts.2 = 6,
rot.pts = c(2,3,4,5),angle = runif(1,min=20,max=40),degrees=TRUE)
new[,,i] <- tmp[,,i]
}
plotAllSpecimens(new)
sessionInfo()
library(geomorph)
sessionInfo()
library(geomorph)
?TOC
?gpagen
library(geiger)
?sim.char
library(geiger)
?fitDiscrete
library(phytools)
?physig
?phylosig
library(RRPP)
Y1 <- rnorm(50,7)
Y <- cbind(Y1,rnorm(50,8))
X <- rnorm(50,2)
X2 <- rnorm(50,10)
df <- rrpp.data.frame(y = Y, y1 = Y1, x = X, x2= X2) # y is multivariate, y1 is univariate
Fit.Test  <- lm.rrpp(y ~ x, iter = 99, data = df, print.progress = FALSE)
Fit.Test2 <- lm.rrpp(y ~ x2, iter = 99, data = df, print.progress = FALSE)
modComp <- model.comparison(Fit.Test, Fit.Test2, type = "logLik") # this works fine
modComp
Fit.Test  <- lm.rrpp(y1 ~ x, iter = 99, data = df, print.progress = FALSE)
Fit.Test2 <- lm.rrpp(y1 ~ x2, iter = 99, data = df, print.progress = FALSE)
modComp <- model.comparison(Fit.Test, Fit.Test2, type = "logLik") # this does not work
?model.comparison
Fit.Test
devtools::install_github('mlcollyer/RRPP')
devtools::install_github('geomorphR/geomorph', ref='Stable', force = TRUE, dependencies = FALSE)
library(geomorph)
?picknplot.shape
devtools::install_github('geomorphR/geomorph', ref="Develop", force = TRUE, dependencies = FALSE)
library(geomorph)
?gpagen
library(geomorph)
?gpagen
devtools::install_github('geomorphR/geomorph', ref="Develop", force = TRUE, dependencies = FALSE)
library(geomorph)
?gpagen
?gpagen
devtools::install_github('geomorphR/geomorph', ref="Stable", force = TRUE, dependencies = FALSE)
?lm
library(geomorph)
?picknplot.shape
remove.packages('geomorph')
devtools::install.github('geomorphR/geomorph', ref='Develop')
devtools::install_github('geomorphR/geomorph', ref='Develop',dependencies = FALSE)
library(geomorph)
?gpagen
devtools::install_github('geomorphR/geomorph', ref="Develop", dependencies = FALSE, force = TRUE)
pwd
pwd()
wd()
library(geomorph)
?procD.lm
vignette("geomorph")
vignette()
library(RRPP)
vignette()
install.packages(c("crul", "geometry", "rhub", "RRPP", "xfun"))
library(RRPP)
?lm.rrpp
install.packages('geomorph')
library(geomorph)
?gpagen
devtools::install_github('geomorphR/geomorph', ref="Develop", force = TRUE, dependencies = FALSE)
library(geomorph)
?geomorph
devtools::install_github('geomorphR/geomorph', ref="Stable", force = TRUE, dependencies = FALSE)
library(geomorph)
?geomorph
?RRPP
library(geomorph)
?geomorph
browseVignettes(package="geomorph")
install.packages("rgl")
library(geomorph)
data("scallops")
y.gpa <- gpagen(scallops$coorddata)
dim(y.gpa$coords)
y.gpa$Csize
res <- gpagen(y.gpa$coords~y.gpa$Csize)
res <- gpagen(coords~Csize, data = y.gpa)
gdf <- geomorph.data.frame(shape = y.gpa$coords, size = y.gpa$Csize)
res <- procD.lm(shape~size, data = gdf)
res$fitted
m <- mshape(y.gpa$coords)
plotRefToTarget(m,res$fitted[1,])
fitted <- arrayspecs(res$fitted,p=46, k=3)
plotRefToTarget(m,fitted[,,1])
m
fitted[,,1]
?plotRefToTarget
plotRefToTarget(m,fitted[,,1], method = "points")
library(testthat)
?shape.predictor
library(geomorph)
?shape.predictor
?warpRefMesh
library(geomorph)
?digit.curves
digit.curves
231:239
library(geomorph)
procD.pgls
procD.lm
procD.pgls
procD.lm
?procD.pgls
### Example of D-PGLS for high-dimensional data
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)    #GPA-alignment
gdf <- geomorph.data.frame(Y.gpa, phy = plethspecies$phy)
pleth.pgls <- procD.pgls(coords ~ Csize, phy = phy, data = gdf, iter = 999)
anova(pleth.pgls)
summary(pleth.pgls)  #similar output
### Working with procD.pgls objects
predict(pleth.pgls)
plot(pleth.pgls, type="regression", reg.type="RegScore", predictor = gdf$Csize)
a
### Working with procD.pgls objects
predict(pleth.pgls)
plot(pleth.pgls, type="regression", reg.type="PredLine", predictor = gdf$Csize)
devtools::install_github('mlcollyer/RRPP')
library(RRPP)
library(geomorph)
?procD.pgls
### Example of D-PGLS for high-dimensional data
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)    #GPA-alignment
gdf <- geomorph.data.frame(Y.gpa, phy = plethspecies$phy)
pleth.pgls <- procD.pgls(coords ~ Csize, phy = phy, data = gdf, iter = 999)
anova(pleth.pgls)
summary(pleth.pgls)  #similar output
### Working with procD.pgls objects
predict(pleth.pgls)
plot(pleth.pgls, type="regression", reg.type="RegScore", predictor = gdf$Csize)
### Example of D-PGLS for high-dimensional data
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)    #GPA-alignment
gdf <- geomorph.data.frame(Y.gpa, phy = plethspecies$phy)
pleth.pgls <- procD.pgls(coords ~ Csize, phy = phy, data = gdf, iter = 999)
anova(pleth.pgls)
summary(pleth.pgls)  #similar output
### Working with procD.pgls objects
predict(pleth.pgls)
plot(pleth.pgls, type="regression", reg.type="PredLine", predictor = gdf$Csize)
?trajectory.analysis
### Analysis of sexual dimorphism vectors (factorial approach)
data(Pupfish)
fit <- lm.rrpp(coords ~ Pop * Sex, data = Pupfish, iter = 999)
reveal.model.designs(fit)
TA <- trajectory.analysis(fit, groups = Pupfish$Pop, traj.pts = Pupfish$Sex)
summary(TA, attribute = "MD") # Magnitude difference (absolute difference between path distances)
summary(TA, attribute = "TC", angle.type = "deg") # Correlations (angles) between trajectories
summary(TA, attribute = "SD") # No shape differences between vectors
# Retain results
TA.summary <- summary(TA, attribute = "MD")
TA.summary$summary.table
# Plot results
TP <- plot(TA, pch = as.numeric(Pupfish$Pop) + 20, bg = as.numeric(Pupfish$Sex),
cex = 0.7, col = "gray")
add.trajectories(TP, traj.pch = c(21, 22), start.bg = 1, end.bg = 2)
legend("topright", levels(Pupfish$Pop), pch =  c(21, 22), pt.bg = 1)
# data are planar Cartesian coordinates (x, y) across 5 points (10 variables)
data(motionpaths)
fit <- lm.rrpp(trajectories ~ groups, data = motionpaths, iter = 999)
TA <- trajectory.analysis(fit, groups = motionpaths$groups, traj.pts = 5)
summary(TA, attribute = "MD") # Magnitude difference (absolute difference between path distances)
summary(TA, attribute = "TC", angle.type = "deg") # Correlations (angles) between trajectories
summary(TA, attribute = "SD") # Shape differences between trajectories
TP <- plot(TA, pch = 21, bg = as.numeric(motionpaths$groups),
cex = 0.7, col = "gray")
add.trajectories(TP, traj.pch = 21, traj.bg = 1:4)
1/sqrt(15)
log(1/sqrt(15))
1/sqrt(14)
library(geomorph)
?modularity.test
library(geomorph)
data(pupfish)
Y.gpa<-gpagen(pupfish$coords, print.progress = FALSE)    #GPA-alignment
#landmarks on the body and operculum
land.gps<-rep('a',56); land.gps[39:48]<-'b'
MT <- modularity.test(Y.gpa$coords,land.gps,CI=FALSE,iter=99)
summary(MT) # Test summary
IT <- integration.test(Y.gpa$coords,land.gps,CI=FALSE,iter=99)
IT <- integration.test(Y.gpa$coords,land.gps,iter=99)
?integration.test
IT <- integration.test(Y.gpa$coords,partition.gp=land.gps,iter=99)
compare.pls(IT,MT)
library(geomorph)
data("pupfish")
data(pupfish)
Y.gpa<-gpagen(pupfish$coords, print.progress = FALSE)    #GPA-alignment
#landmarks on the body and operculum
land.gps<-rep('a',56); land.gps[39:48]<-'b'
MT <- modularity.test(Y.gpa$coords,land.gps,CI=FALSE,iter=99)
IT <- integration.test(Y.gpa$coords, partition.gp=land.gps, iter=999)
MT$call
class(MT)
class(IT)
class(MT) <- "pls"
class(MT)
compare.pls(MT,IT)
compare.pls
MT <- modularity.test(Y.gpa$coords,land.gps,CI=FALSE,iter=99)
data(plethodon)
Y.gpa<-gpagen(plethodon$land)    #GPA-alignment
#landmarks on the skull and mandible assigned to partitions
land.gps<-c("A","A","A","A","A","B","B","B","B","B","B","B")
MT <- modularity.test(Y.gpa$coords,land.gps,CI=FALSE,iter=99)
MT2 <- modularity.test(Y.gpa$coords,land.gps,CI=FALSE,iter=99)
#landmarks on the skull and mandible assigned to partitions
land.2<-c("A","A","A","A","A","B","B","B","B","B","B","B")
MT2 <- modularity.test(Y.gpa$coords,land.2,CI=FALSE,iter=99)
setwd("C:/DeanData/Teaching/Workshops/2019-Chile/2019-Chile/Labs")
library(geomorph)
# Read PLY
new <- read.ply("Data/Mandible.ply")
str(new)
# Read PLY
new <- read.ply("Data/glyp02L.ply")
str(new)
digit.fixed(new, 5)
3dland <- digit.fixed(new, 5)
land.fixed <- digit.fixed(new, 5)
land.fixed
?digit.curves
buildtemplate(new,land.fixed, surface.sliders = 100)
buildtemplate(new,land.fixed, surface.sliders = 100) -> mysurf
digitsurface(new, land.fixed)
library(StereoMorph)
library(geomorph)
digitizeImages(image.file='Images', shapes.file='Shapes',
landmarks.ref=paste("LM", c(1:5), sep=""))
setwd("C:/DeanData/Teaching/Workshops/2019-Scotland/2019-Glasgow/Labs")
readShapes("Shapes")
setwd("C:/DeanData/Teaching/Workshops/2019-Scotland/2019-Glasgow/Lectures")
setwd("C:/DeanData/Teaching/Workshops/2019-Scotland/2019-Glasgow/Lectures")
setwd("C:/DeanData/Teaching/Workshops/2019-Scotland/2019-Glasgow/Lectures")
