library(geomorph)
library(ape)
plethtree <- read.tree('LectureData/09.pcm/plethtree.tre')
plethland <- readland.tps('LectureData/09.pcm/PlethodonLand.tps',specID = "ID",
warnmsg = FALSE)
Y.gpa <- gpagen(plethland, print.progress = FALSE)
svl <- Y.gpa$Csize
shape <- Y.gpa$coords
gps <- read.csv('LectureData/09.pcm/PlethGps.csv', header=TRUE, row.names=1)
shape.test <- treedata(phy = plethtree, data = two.d.array(shape), warnings = TRUE)
library(geiger)
shape.test <- treedata(phy = plethtree, data = two.d.array(shape), warnings = TRUE)
match(plethtree$tip.label,rownames(two.d.array(shape)))
data.matched <- treedata(phy = plethtree, data = gps, warnings=FALSE)
elev <- as.factor(data.matched$data); names(elev) <- row.names(data.matched$data)
hist(svl)
plot(Y.gpa)
?hist
?shape.predictor
geomorph::shape.predictor
?geomorph::shape.predictor
library(geomorph)
plethtree <- read.tree('LectureData/09.pcm/plethtree.tre')
library(geiger)
library(geomorph)
library(geiger)
plethtree <- read.tree('LectureData/09.pcm/plethtree.tre')
plethland <- readland.tps('LectureData/09.pcm/PlethodonLand.tps',specID = "ID",
warnmsg = FALSE)
Y.gpa <- gpagen(plethland, print.progress = FALSE)
M <- mshape(Y.gpa$coords)
svl <- Y.gpa$Csize
shape <- Y.gpa$coords
gps <- read.csv('LectureData/09.pcm/PlethGps.csv', header=TRUE, row.names=1)
shape.test <- treedata(phy = plethtree, data = two.d.array(shape), warnings = TRUE)
#match(plethtree$tip.label,rownames(two.d.array(shape)))
data.matched <- treedata(phy = plethtree, data = gps, warnings=FALSE)
elev <- as.factor(data.matched$data); names(elev) <- row.names(data.matched$data)
gdf <- geomorph.data.frame(shape=shape, svl=svl,elev = elev, plethtree=plethtree)
links <- matrix(c(4,3,2,1,1,6,7,8,9,10,1,1,11,5,5,4,2,3,7,8,9,10,11,9,10,1),
ncol=2,byrow=FALSE)
land.gps<-c("A","A","A","A","A","B","B","B","B","B","B")
PLS.Y <- phylo.integration(A = gdf$shape, partition.gp = land.gps, phy= plethtree, print.progress = FALSE)
summary(PLS.Y)
plot(PLS.Y)
## shape predictions
preds <- shape.predictor(PLS.Y, x= svl, Intercept = FALSE, method = "PLS",
pred1 = -0.02, pred2 = 0.02))
## shape predictions
preds <- shape.predictor(PLS.Y, x= svl, Intercept = FALSE, method = "PLS",
pred1 = -0.02, pred2 = 0.02)
## shape predictions
preds <- shape.predictor(PLS.Y, Intercept = FALSE, method = "PLS",
pred1 = -0.02, pred2 = 0.02)
PLS.Y$A1.matrix
PLS.Y$A1
two.d.array(PLS.Y$A1)
PLS.Y$A1.matrix
two.d.array(gdf$shape)
PLS.Y$A1.matrix
two.d.array(gdf$shape)
class(PLS.Y)
PLS.Y$A2.matrix
## shape predictions
preds <- shape.predictor(A1 = PLS.Y$A1, A2 = PLS.Y$A2, Intercept = FALSE, method = "PLS",
pred1 = -0.02, pred2 = 0.02)
## shape predictions
preds <- shape.predictor(PLS.Y$A1, PLS.Y$A2, Intercept = FALSE, method = "PLS",
pred1 = -0.02, pred2 = 0.02)
PLS.Y$A1
## shape predictions
preds <- shape.predictor(PLS.Y$A1.matrix, PLS.Y$A2.matrix, Intercept = FALSE, method = "PLS",
pred1 = -0.02, pred2 = 0.02)
## shape predictions
preds <- shape.predictor(PLS.Y$A1, PLS.Y$A2, Intercept = FALSE, method = "PLS", pred1 = -0.02, pred2 = 0.02)
Y.gpa$coords
Y.gpa$coords[1:5,,]
PLS.Y$A1.matrix
PLS.Y$A1
Y.gpa$coords[1:5,,]
## shape predictions
preds <- shape.predictor(Y.gpa$coords[1:5,,], Y.gpa$coords[6:11,,], Intercept = FALSE, method = "PLS", pred1 = -0.02, pred2 = 0.02)
## shape predictions
preds <- shape.predictor(PLS.Y$A1, PLS.Y$A2, Intercept = FALSE, method = "PLS", pred1 = -0.02, pred2 = 0.02)
##############
data(plethspecies)
Y.gpa<-gpagen(plethspecies$land)
Z <- two.d.array(Y.gpa$coords)
library(ape)
V <- vcv(plethspecies$phy)
Pcov <- RRPP:::Cov.proj(V, id = rownames(Z)) Zp <- Pcov %*% Z Xp <- Pcov %*% rep(1, nrow(Z))
OLSmean <- mshape(Y.gpa$coords)
V <- vcv(plethspecies$phy)
Pcov <- RRPP:::Cov.proj(V, id = rownames(Z))
Zp <- Pcov %*% Z
Xp <- Pcov %*% rep(1, nrow(Z))
OLSmean <- mshape(Y.gpa$coords)
GLSmean <- lm.fit(Xp, Zp)$coefficients
GLSmean <- matrix(GLSmean, length(GLSmean)/2, 2,
byrow = TRUE)
Zp <- arrayspecs(Zp, ncol(Zp)/2, 2)
spec <- 9
par(mfrow = c(1,2))
plotRefToTarget(OLSmean, Y.gpa$coords[,,spec])
title("OLS")
plotRefToTarget(GLSmean, Zp[,,spec])
title("GLS”)
par(mfrow = c(1,1))
